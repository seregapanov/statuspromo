# bot/main.py

from aiogram import Bot, Dispatcher
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.filters import CommandStart, Command
from aiogram.utils.markdown import hlink
import asyncio
import requests
import re

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Supabase ===
SUPABASE_URL = "https://hezxfkeflzupndlbkshi.supabase.co"
SUPABASE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imhlenhma2VmbHp1cG5kbGJrc2hpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTcwNzU5MDEsImV4cCI6MjA3MjY1MTkwMX0.qJYyJinI27Zx4bvYBv9d70cs-J3QPrFcwBLNAxz91eg"
HEADERS = {
    "apikey": SUPABASE_KEY,
    "Authorization": f"Bearer {SUPABASE_KEY}",
    "Content-Type": "application/json"
}

BOT_TOKEN = "8218788965:AAHu00w5c7gTgBeukl6ESnBtPMVS_imDzsw"
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

def get_campaign(camp_id: str):
    url = f"{SUPABASE_URL}/rest/v1/campaigns?id=eq.{camp_id}"
    response = requests.get(url, headers=HEADERS)
    if response.status_code == 200 and response.json():
        return response.json()[0]
    return None

@dp.message(CommandStart())
async def start_command(message: Message):
    args = message.text.split(" ", 1)
    if len(args) > 1 and args[1].startswith("share_"):
        camp_id = args[1][6:]
        camp = get_campaign(camp_id)
        if not camp:
            await message.answer("‚ùå –ö–∞–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        await send_campaign_materials(message.from_user, camp)
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –Ω–∞ —Å—Å—ã–ª–∫—É –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.")

async def send_campaign_materials(user, camp):
    username = user.username or f"tg{user.id}"
    utm_link = camp["target_link"] + f"?utm_source=telegram_status&utm_content=@{username}"
    caption = camp["caption_template"].replace("{link}", hlink('->', utm_link))

    if camp.get("video_url"):
        try:
            await bot.send_video(
                chat_id=user.id,
                video=camp["video_url"],
                caption=caption,
                parse_mode="HTML"
            )
        except:
            await bot.send_photo(
                chat_id=user.id,
                photo=camp.get("image_url", "https://via.placeholder.com/800x1422/229ED9/FFFFFF?text=Ad"),
                caption=caption,
                parse_mode="HTML"
            )
    else:
        await bot.send_photo(
            chat_id=user.id,
            photo=camp.get("image_url", "https://via.placeholder.com/800x1422/229ED9/FFFFFF?text=Ad"),
            caption=caption,
            parse_mode="HTML"
        )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–ª", callback_data=f"confirm_{camp['id']}")]
    ])
    await bot.send_message(
        user.id,
        "–ù–∞–∂–º–∏, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é:\n\n"
        "–ò–ª–∏ –ø—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ç—É—Å: https://t.me/username/s/123",
        reply_markup=keyboard
    )

@dp.callback_query(lambda c: c.data.startswith("confirm_"))
async def handle_confirmation(callback):
    user_id = callback.from_user.id
    camp_id = callback.data[8:]

    camp = get_campaign(camp_id)
    if not camp:
        await callback.answer("‚ùå –ö–∞–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–µ–π
    check_response = requests.get(
        f"{SUPABASE_URL}/rest/v1/shares?user_id=eq.tg_{user_id}&campaign_id=eq.{camp_id}",
        headers=HEADERS
    )
    if check_response.status_code == 200 and check_response.json():
        await callback.answer("‚ö†Ô∏è –í—ã —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏", show_alert=True)
        return

    points_reward = camp.get("points_reward", 10)
    user_response = requests.get(
        f"{SUPABASE_URL}/rest/v1/users?id=eq.tg_{user_id}",
        headers=HEADERS
    )

    if user_response.status_code != 200 or not user_response.json():
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    user = user_response.json()[0]
    new_points = user["points"] + points_reward

    update_response = requests.patch(
        f"{SUPABASE_URL}/rest/v1/users?id=eq.tg_{user_id}",
        headers=HEADERS,
        json={"points": new_points}
    )

    if update_response.status_code == 204:
        requests.post(
            f"{SUPABASE_URL}/rest/v1/shares",
            headers=HEADERS,
            json={
                "user_id": f"tg_{user_id}",
                "campaign_id": camp_id,
                "timestamp": callback.message.date.isoformat()
            }
        )
        await callback.answer(f"‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ {points_reward} –±–∞–ª–ª–æ–≤")
        await callback.message.edit_text(
            f"‚úÖ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
            f"–ù–∞—á–∏—Å–ª–µ–Ω–æ: {points_reward} –±–∞–ª–ª–æ–≤\n"
            f"–í–∞—à –±–∞–ª–∞–Ω—Å: {new_points}"
        )
    else:
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è")

# === –ù–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä: –ø—Ä–∏—ë–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç–∞—Ç—É—Å ===
STORY_URL_PATTERN = re.compile(r't\.me/([^/]+)/s/(\d+)', re.IGNORECASE)

@dp.message()
async def handle_story_link(message: Message):
    text = message.text.strip()

    # –ò—â–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ç—É—Å
    match = STORY_URL_PATTERN.search(text)
    if not match:
        # –ù–µ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—É—Å ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏–ª–∏ –ø–æ–º–æ—á—å
        if message.chat.type == 'private':
            await message.reply(
                "üì© –ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é:\n\n"
                "1. –û–ø—É–±–ª–∏–∫—É–π —Å—Ç–∞—Ç—É—Å —Å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–º\n"
                "2. –ü—Ä–∏—à–ª–∏ —Å—é–¥–∞ —Å—Å—ã–ª–∫—É: https://t.me/username/s/123"
            )
        return

    username_in_link = match.group(1)
    story_id = match.group(2)

    # –ü—Ä–æ–≤–µ—Ä–∏–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ username
    user = message.from_user
    if user.username and user.username.lower() != username_in_link.lower():
        await message.reply(
            f"‚ö†Ô∏è –í—ã —É–∫–∞–∑–∞–ª–∏ @{username_in_link}, –Ω–æ –≤—ã –≤–æ—à–ª–∏ –∫–∞–∫ @{user.username}.\n"
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É–±–ª–∏–∫—É–µ—Ç–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞."
        )
        return

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ HEAD-–∑–∞–ø—Ä–æ—Å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

    # –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã –∑–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é
    await confirm_user_publication(user, message)

async def confirm_user_publication(user, message):
    # –õ–æ–≥–∏–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é)
    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∫–æ–¥ –∏–∑ handle_confirmation, –Ω–æ –±–µ–∑ callback

    # –ü—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–ª –ª–∏ —É–∂–µ
    check_response = requests.get(
        f"{SUPABASE_URL}/rest/v1/shares?user_id=eq.tg_{user.id}",
        headers=HEADERS
    )
    if check_response.status_code == 200 and check_response.json():
        await message.reply("‚ö†Ô∏è –í—ã —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—é.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –ª—é–±—É—é –∞–∫—Ç–∏–≤–Ω—É—é –∫–∞–º–ø–∞–Ω–∏—é (–∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—é—é)
    camp_response = requests.get(
        f"{SUPABASE_URL}/rest/v1/campaigns?order=created_at.desc&limit=1",
        headers=HEADERS
    )
    if not camp_response.json():
        await message.reply("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π.")
        return

    camp = camp_response.json()[0]
    points_reward = camp.get("points_reward", 10)

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_response = requests.get(
        f"{SUPABASE_URL}/rest/v1/users?id=eq.tg_{user.id}",
        headers=HEADERS
    )
    if user_response.status_code != 200 or not user_response.json():
        await message.reply("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    user_data = user_response.json()[0]
    new_points = user_data["points"] + points_reward

    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–ª—ã
    update_response = requests.patch(
        f"{SUPABASE_URL}/rest/v1/users?id=eq.tg_{user.id}",
        headers=HEADERS,
        json={"points": new_points}
    )

    if update_response.status_code == 204:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–∫—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        requests.post(
            f"{SUPABASE_URL}/rest/v1/shares",
            headers=HEADERS,
            json={
                "user_id": f"tg_{user.id}",
                "campaign_id": camp["id"],
                "timestamp": message.date.isoformat()
            }
        )
        await message.reply(
            f"‚úÖ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
            f"–ù–∞—á–∏—Å–ª–µ–Ω–æ: {points_reward} –±–∞–ª–ª–æ–≤\n"
            f"–í–∞—à –±–∞–ª–∞–Ω—Å: {new_points}"
        )
    else:
        await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤")

async def main():
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
